load("@boost_rules//:boost/boost.bzl", "boost_library")

boost_library(
  name = "algorithm",
  deps = [
    ":function",
    ":range",
  ]
)

boost_library(
  name = "align",
)

boost_library(
  name = "aligned_storage",
  deps = [
    ":type_traits",
  ],
)

boost_library(
  name = "any",
  deps = [
    ":config",
    ":mpl",
    ":static_assert",
    ":throw_exception",
    ":type_index",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "archive",
  deps = [
    ":assert",
    ":cstdint",
    ":integer",
    ":iterator",
    ":io",
    ":mpl",
    ":noncopyable",
    ":pointee",
    ":smart_ptr",
    ":spirit",
  ],
)

boost_library(
  name = "atomic",
  deps = [
    ":assert",
    ":config",
    ":cstdint",
    ":memory_order",
    ":type_traits",
  ]
)

boost_library(
  name = "array",
  deps = [
    ":swap",
    ":functional",
  ],
)

boost_library(
  name = "asio",
  deps = [
    ":date_time",
    ":regex",
    ":system",
    ":throw_exception",
  ],
)

boost_library(
  name = "assert",
)

boost_library(
  name = "blank",
  hdrs = [
    "boost/blank_fwd.hpp",
  ],
)

boost_library(
  name = "bind",
  deps = [
    ":get_pointer",
    ":is_placeholder",
    ":ref",
    ":mem_fn",
    ":visit_each",
  ],
)

boost_library(
  name = "bucket_sorter",
  deps = [
    ":limits",
  ],
)

boost_library(
  name = "call_traits",
)

boost_library(
  name = "cerrno",
)

boost_library(
  name = "checked_delete",
)

boost_library(
  name = "chrono",
  deps = [
    ":assert",
    ":config",
    ":cstdint",
    ":detail",
    ":integer",
    ":move",
    ":mpl",
    ":operators",
    ":predef",
    ":ratio",
    ":static_assert",
    ":system",
    ":throw_exception",
    ":typeof",
    ":type_traits",
    ":utility",
    ":version",
  ],
)

boost_library(
  name = "compressed_pair",
  deps = [
    ":config",
    ":detail",
  ],
)

boost_library(
  name = "compute",
  deps = [
    ":algorithm",
    ":array",
    ":assert",
    ":chrono",
    ":config",
    ":filesystem",
    ":function",
    ":function_types",
    ":fusion",
    ":iterator",
    ":lexical_cast",
    ":make_shared",
    ":mpl",
    ":noncopyable",
    ":optional",
    ":preprocessor",
    ":property_tree",
    ":proto",
    ":range",
    ":shared_ptr",
    ":static_assert",
    ":throw_exception",
    ":tuple",
    ":typeof",
    ":type_traits",
    ":utility",
    ":uuid",
    ":version",
  ],
)

boost_library(
  name = "concept",
  deps = [
    ":config",
    ":detail",
    ":mpl",
    ":preprocessor",
  ]
)

boost_library(
  name = "concept_archetype",
  deps = [
    ":config",
    ":iterator",
    ":mpl",
  ],
)

boost_library(
  name = "concept_check",
  deps = [
    ":assert",
    ":concept",
  ]
)

boost_library(
  name = "config",
  deps = [
    ":version",
  ]
)

boost_library(
  name = "container",
  deps = [
    ":core",
    ":config",
    ":move",
    ":intrusive",
  ],
)

boost_library(
  name = "container_traits",
  deps = [
    ":next_prior",
    ":unordered_map",
    ":unordered_set",
  ],
)

boost_library(
  name = "conversion",
)

boost_library(
  name = "core",
)

boost_library(
  name = "cstdint",
)

boost_library(
  name = "current_function",
)

boost_library(
  name = "date_time",
  deps = [
    ":algorithm",
    ":assert",
    ":config",
    ":cstdint",
    ":detail",
    ":limits",
    ":mpl",
    ":operators",
    ":range",
    ":shared_ptr",
    ":static_assert",
    ":throw_exception",
    ":tokenizer",
    ":type_traits",
  ]
)

boost_library(
  name = "detail",
  deps = [
    ":limits",
  ],
)

boost_library(
  name = "disjoint_sets",
  deps = [
    ":pending",
  ],
  hdrs = [
    "boost/graph/properties.hpp",
    "boost/pending/detail/disjoint_sets.hpp",
  ]
)

boost_library(
  name = "enable_shared_from_this",
  deps = [
    ":smart_ptr",
  ],
)

boost_library(
  name = "exception",
  deps = [
    ":config",
  ],
)

boost_library(
  name = "exception_ptr",
  deps = [
    ":exception",
  ],
)

boost_library(
  name = "filesystem",
  deps = [
    ":config",
    ":functional",
    ":io",
    ":iterator",
    ":range",
    ":smart_ptr",
    ":system",
    ":type_traits",
  ],
)

boost_library(
  name = "foreach",
)

boost_library(
  name = "format",
  deps = [
    ":assert",
    ":config",
    ":detail",
    ":limits",
    ":optional",
    ":shared_ptr",
    ":throw_exception",
    ":utility",
  ],
)

boost_library(
  name = "function",
  deps = [
    ":bind",
    ":integer",
  ],
  hdrs = [
    "boost/function_equal.hpp",
  ],
)

boost_library(
  name = "function_types",
)

boost_library(
  name = "functional",
  deps = [
    ":detail",
  ],
)

boost_library(
  name = "fusion",
  deps = [
    ":call_traits",
    ":config",
    ":core",
    ":detail",
    ":functional",
    ":function_types",
    ":get_pointer",
    ":mpl",
    ":preprocessor",
    ":ref",
    ":static_assert",
    ":tuple",
    ":typeof",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "get_pointer",
)

boost_library(
  name = "graph",
  deps = [
    ":algorithm",
    ":any",
    ":array",
    ":assert",
    ":bimap",
    ":bind",
    ":bucket_sorter.hpp",
    ":concept",
    ":concept_archetype",
    ":concept_check",
    ":config",
    ":container_traits.hpp",
    ":detail",
    ":detail/int_iterator.hpp",
    ":disjoint_sets.hpp",
    ":dynamic_bitset",
    ":foreach",
    ":function",
    ":functional",
    ":implicit_cast",
    ":indirect_cmp.hpp",
    ":integer",
    ":iterator",
    ":iterator_adaptors",
    ":lexical_cast",
    ":limits",
    ":make_shared",
    ":math",
    ":move",
    ":mpl",
    ":multi_index",
    ":multi_index_container",
    ":mutable_queue.hpp",
    ":next_prior",
    ":none_t",
    ":operators",
    ":optional",
    ":parameter",
    ":preprocessor",
    ":property.hpp",
    ":property_map",
    ":property_serialize.hpp",
    ":property_tree",
    ":queue.hpp",
    ":range",
    ":ref",
    ":relaxed_heap.hpp",
    ":scoped_ptr",
    ":serialization",
    ":shared_array",
    ":shared_ptr",
    ":smart_ptr",
    ":spirit",
    ":static_assert",
    ":test",
    ":throw_exception",
    ":tti",
    ":tuple",
    ":type_traits",
    ":typeof",
    ":unordered_map",
    ":unordered_set",
    ":utility",
    ":variant",
    ":version",
    ":weak_ptr",
    ":xpressive",
  ],
)

boost_library(
  name = "heap",
  deps = [
    ":parameter",
  ],
)

boost_library(
  name = "is_placeholder",
)

boost_library(
  name = "indirect_cmp",
  deps = [
    ":config",
    ":property_map",
  ],
)

boost_library(
  name = "integer",
  deps = [
    ":static_assert"
  ],
  hdrs = [
    "boost/integer_fwd.hpp",
    "boost/integer_traits.hpp",
  ],
)

boost_library(
  name = "iterator",
  deps = [
    ":detail",
    ":static_assert",
  ],
)

boost_library(
  name = "indirect_reference",
  deps = [
  ],
)

boost_library(
  name = "integer_log2",
  deps = [
    ":integer",
  ],
)

boost_library(
  name = "intrusive",
  deps = [
    ":assert",
    ":cstdint",
    ":noncopyable",
    ":static_assert"
  ],
)

boost_library(
  name = "intrusive_ptr",
  deps = [
    ":assert",
    ":detail",
    ":smart_ptr",
  ],
)

boost_library(
  name = "io",
  hdrs = [
    "boost/io_fwd.hpp",
  ],
)

boost_library(
  name = "lambda",
  deps = [
    ":config",
    ":detail",
    ":indirect_reference",
    ":is_placeholder",
    ":mpl",
    ":preprocessor",
    ":tuple",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "lexical_cast",
  deps = [
    ":array",
    ":config",
    ":container",
    ":detail",
    ":limits",
    ":math",
    ":mpl",
    ":range",
    ":static_assert",
    ":throw_exception",
    ":tokenizer",
    ":type_traits",
  ],
)

boost_library(
  name = "limits",
)

boost_library(
  name = "logic",
  deps = [
    ":config",
    ":detail",
  ]
)

boost_library(
  name = "make_shared",
  deps = [
    ":smart_ptr",
  ],
)

boost_library(
  name = "math",
  hdrs = [
    "boost/math_fwd.hpp",
  ]
)

boost_library(
  name = "mem_fn",
)

boost_library(
  name = "memory_order",
)

boost_library(
  name = "move",
  deps = [
    ":assert",
    ":detail",
    ":static_assert",
  ],
)

boost_library(
  name = "mpi",
  deps = [
    ":archive",
    ":assert",
    ":config",
    ":function",
    ":graph",
    ":integer",
    ":iterator",
    ":limits",
    ":mpl",
    ":noncopyable",
    ":optional",
    ":property_map",
    ":python",
    ":scoped_array",
    ":serialization",
    ":shared_array",
    ":shared_ptr",
    ":static_assert",
    ":throw_exception",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "mpl",
  deps = [
    ":preprocessor",
    ":move",
  ]
)

boost_library(
  name = "multi_array",
  deps = [
    ":array",
    ":assert",
    ":concept_check",
    ":config",
    ":functional",
    ":iterator",
    ":limits",
    ":mpl",
    ":static_assert",
    ":type",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "multi_index",
  deps = [
    ":foreach",
    ":serialization",
    ":static_assert",
    ":tuple",
  ],
)

boost_library(
  name = "multi_index_container",
  deps = [
    ":config",
    ":detail",
    ":move",
    ":mpl",
    ":multi_index",
    ":serialization",
    ":static_assert",
    ":throw_exception",
    ":type_traits",
    ":utility",
  ],
  hdrs = [
    "boost/multi_index_container_fwd.hpp",
  ]
)

boost_library(
  name = "mutable_queue",
  deps = [
    ":is_heap",
    ":mutable_heap",
    ":property_map",
  ],
  hdrs = [
    "boost/graph/detail/array_binary_tree.hpp",
  ]
)

boost_library(
  name = "next_prior",
  deps = [
    ":type_traits",
  ],
)

boost_library(
  name = "noncopyable",
)

boost_library(
  name = "none",
  hdrs = [
    "boost/none_t.hpp"
  ],
)

boost_library(
  name = "numeric",
  deps = [
    ":array",
    ":assert",
    ":bind",
    ":compute",
    ":concept_check",
    ":config",
    ":core",
    ":cstdint",
    ":detail",
    ":function",
    ":fusion",
    ":iterator",
    ":limits",
    ":logic",
    ":math",
    ":mpl",
    ":multi_array",
    ":next_prior",
    ":noncopyable",
    ":preprocessor",
    ":range",
    ":ref",
    ":serialization",
    ":shared_array",
    ":static_assert",
    ":throw_exception",
    ":type",
    ":typeof",
    ":type_traits",
    ":units",
    ":utility",
  ],
)

boost_library(
  name = "operators",
)

boost_library(
  name = "optional",
  deps = [
    ":none",
    ":type",
  ],
)

boost_library(
  name = "parameter",
)

boost_library(
  name = "pointee",
  deps = [
  ],
)

boost_library(
  name = "pool",
  deps = [
    ":assert",
    ":config",
    ":detail",
    ":integer",
    ":limits",
    ":throw_exception",
    ":type_traits",
  ],
)

boost_library(
  name = "predef",
)

boost_library(
  name = "preprocessor",
)

boost_library(
  name = "program_options",
  deps = [
    ":any",
    ":config",
    ":detail",
    ":function",
    ":iterator",
    ":lexical_cast",
    ":noncopyable",
    ":numeric",
    ":shared_ptr",
    ":smart_ptr",
    ":static_assert",
    ":throw_exception",
    ":type_traits",
    ":version",
  ],
)

boost_library(
  name = "property_map",
  deps = [
    ":any",
    ":assert",
    ":bind",
    ":concept_archetype",
    ":concept_check",
    ":config",
    ":cstdint",
    ":detail",
    ":function",
    ":iterator",
    ":lexical_cast",
    ":mpl",
    ":multi_index",
    ":multi_index_container",
    ":optional",
    ":serialization",
    ":shared_ptr",
    ":smart_ptr",
    ":static_assert",
    ":throw_exception",
    ":type",
    ":type_traits",
    ":utility",
    ":version",
    ":weak_ptr",
  ],
)

boost_library(
  name = "property_tree",
  deps = [
    ":any",
    ":assert",
    ":bind",
    ":config",
    ":format",
    ":iterator",
    ":limits",
    ":mpl",
    ":multi_index",
    ":multi_index_container",
    ":next_prior",
    ":optional",
    ":range",
    ":ref",
    ":serialization",
    ":static_assert",
    ":throw_exception",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "proto",
  deps = [
    ":config",
    ":detail",
    ":fusion",
    ":get_pointer",
    ":mpl",
    ":noncopyable",
    ":preprocessor",
    ":range",
    ":ref",
    ":static_assert",
    ":typeof",
    ":type_traits",
    ":utility",
    ":version",
  ],
)

boost_library(
  name = "python",
  deps = [
    ":config",
    ":iterator",
    ":mpl",
    ":preprocessor",
    ":static_assert",
    ":type",
    ":type_traits",
  ],
)

boost_library(
  name = "random",
  deps = [
    ":assert",
    ":config",
    ":cstdint",
    ":detail",
    ":integer",
    ":integer_log2",
    ":limits",
    ":math",
    ":mpl",
    ":noncopyable",
    ":operators",
    ":range",
    ":static_assert",
    ":system",
    ":throw_exception",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "range",
  deps = [
    ":concept_check",
    ":optional",
  ]
)

boost_library(
  name = "ratio",
  deps = [
    ":config",
    ":core",
    ":cstdint",
    ":integer",
    ":mpl",
    ":static_assert",
    ":type_traits",
  ],
)

boost_library(
  name = "ref",
  deps = [
    ":core",
    ":detail",
  ],
)

boost_library(
  name = "regex",
  defines = [
    "BOOST_FALLTHROUGH"
  ],
  deps = [
    ":assert",
    ":config",
    ":cstdint",
    ":detail",
    ":exception",
    ":functional",
    ":integer",
    ":limits",
    ":mpl",
    ":predef",
    ":ref",
    ":smart_ptr",
    ":throw_exception",
    ":type_traits",
  ],
  hdrs = [
    "boost/regex_fwd.hpp",
    "boost/cregex.hpp",
  ],
)

boost_library(
  name = "scoped_array",
  deps = [
    ":checked_delete",
  ],
)

boost_library(
  name = "scoped_ptr",
  deps = [
    ":checked_delete",
  ],
)

boost_library(
  name = "shared_ptr",
  deps = [
    ":checked_delete",
  ],
)

boost_library(
  name = "shared_array",
  deps = [
    ":checked_delete",
  ],
)

boost_library(
  name = "serialization",
  deps = [
    ":archive",
    ":array",
    ":call_traits",
    ":compressed_pair",
    ":config",
    ":detail",
    ":function",
    ":operators",
    ":type_traits",
  ],
)

boost_library(
  name = "smart_ptr",
  deps = [
    ":align",
    ":core",
    ":predef",
    ":throw_exception",
    ":utility",
    ":scoped_ptr",
    ":scoped_array",
    ":shared_ptr",
    ":shared_array",
  ],
)

boost_library(
  name = "spirit",
  deps = [
    ":ref",
    ":optional",
  ],
)

boost_library(
  name = "static_assert",
)

boost_library(
  name = "system",
  deps = [
    ":assert",
    ":cerrno",
    ":config",
    ":core",
    ":cstdint",
    ":noncopyable",
    ":predef",
    ":utility",
  ],
)

boost_library(
  name = "swap",
)

boost_library(
  name = "thread",
  deps = [
    ":assert",
    ":atomic",
    ":bind",
    ":chrono",
    ":concept_check",
    ":config",
    ":container",
    ":core",
    ":cstdint",
    ":current_function",
    ":date_time",
    ":detail",
    ":enable_shared_from_this",
    ":exception_ptr",
    ":function",
    ":functional",
    ":intrusive",
    ":intrusive_ptr",
    ":io",
    ":move",
    ":mpl",
    ":next_prior",
    ":optional",
    ":predef",
    ":preprocessor",
    ":scoped_array",
    ":shared_ptr",
    ":smart_ptr",
    ":static_assert",
    ":system",
    ":throw_exception",
    ":tuple",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "throw_exception",
  deps = [
    ":current_function",
    ":exception",
  ],
)

boost_library(
  name = "token_functions",
  deps = [
    ":assert",
    ":config",
    ":detail",
    ":mpl",
    ":throw_exception",
  ],
)

boost_library(
  name = "token_iterator",
  deps = [
    ":assert",
    ":iterator",
    ":token_functions",
  ],
)

boost_library(
  name = "tokenizer",
  deps = [
    ":token_iterator",
  ],
)

boost_library(
  name = "type",
  deps = [
    ":core",
  ]
)

boost_library(
  name = "type_index",
  deps = [
    ":core",
  ]
)

boost_library(
  name = "type_traits",
  deps = [
    ":core",
    ":mpl",
    ":static_assert",
  ]
)

boost_library(
  name = "tuple",
)

boost_library(
  name = "typeof",
  deps = [
    ":config",
    ":mpl",
    ":preprocessor",
    ":type_traits",
    ":utility",
  ],
)

boost_library(
  name = "tr1",
  defines = [
    "BOOST_FALLTHROUGH"
  ],
  deps = [
    ":config",
  ]
)

boost_library(
  name = "units",
  deps = [
    ":config",
    ":core",
    ":integer",
    ":io",
    ":lambda",
    ":math",
    ":mpl",
    ":preprocessor",
    ":serialization",
    ":static_assert",
    ":typeof",
    ":type_traits",
    ":utility",
    ":version",
  ],
)

boost_library(
  name = "utility",
  deps = [
    ":next_prior",
  ],
)

boost_library(
  name = "uuid",
  deps = [
    ":assert",
    ":config",
    ":core",
    ":cstdint",
    ":io",
    ":random",
    ":serialization",
    ":shared_ptr",
    ":static_assert",
    ":throw_exception",
    ":type_traits",
  ],
)

boost_library(
  name = "variant",
  deps = [
    ":aligned_storage",
    ":blank",
    ":call_traits",
    ":math",
    ":type_index",
  ]
)

boost_library(
  name = "version",
)

boost_library(
  name = "visit_each",
)

boost_library(
  name = "weak_ptr",
  deps = [
    ":smart_ptr",
  ],
)
